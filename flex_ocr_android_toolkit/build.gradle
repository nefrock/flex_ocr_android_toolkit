plugins {
    id 'com.android.library'
    id 'maven-publish'
}

android {
    compileSdk 31

    defaultConfig {
        minSdk 22
        targetSdk 31

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    //camerax
    def camerax_version = "1.0.2"
    implementation "androidx.camera:camera-core:${camerax_version}"

    //opencv
    implementation project(path: ':opencv')

    //torch
    implementation 'org.pytorch:pytorch_android_lite:1.10.0'

    //mlkit
    implementation 'com.google.mlkit:text-recognition:16.0.0-beta3'
    implementation 'com.google.mlkit:barcode-scanning:17.0.2'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'flex-ocr-android-toolkit'
            pom {
                name = 'flex ocr android toolkit'
                description = 'A concise description of my library'
                url = 'http://www.example.com/library'
                properties = [
                        myProp          : "value",
                        "prop.with.dots": "anotherValue"
                ]
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'siwazaki'
                        name = 'Satoshi Iwazaki'
                        email = 'siwazaki@nefrock.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://example.com/my-library.git'
                    developerConnection = 'scm:git:ssh://example.com/my-library.git'
                    url = 'http://example.com/my-library/'
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = layout.buildDirectory.dir('repos/releases')
            def snapshotsRepoUrl = layout.buildDirectory.dir('repos/snapshots')
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}